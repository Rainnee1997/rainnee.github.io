{"singlePage": [], "startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "pinyin", "script": "", "style": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "title": "rainy\u7684\u535a\u5ba2", "subTitle": "rainy\u7684\u5b66\u4e60\u8bb0\u5f55\u5206\u4eab", "avatarUrl": "https://avatars.githubusercontent.com/u/53606070?v=4", "GMEEK_VERSION": "last", "postListJson": {"P1": {"htmlDir": "docs/post/rainy-de-xue-xi-ji-lu.html", "labels": ["documentation"], "postTitle": "rainy\u7684\u5b66\u4e60\u8bb0\u5f55", "postUrl": "post/rainy-de-xue-xi-ji-lu.html", "postSourceUrl": "https://github.com/Rainnee1997/rainnee.github.io/issues/1", "commentNum": 0, "wordCount": 9, "description": "\u8bb0\u5f55\u5c5e\u4e8e\u81ea\u5df1\u7684\u5b66\u4e60\u3002", "top": 0, "createdAt": 1719538113, "style": "", "script": "", "ogImage": "https://avatars.githubusercontent.com/u/53606070?v=4", "createdDate": "2024-06-28", "dateLabelColor": "#bc4c00"}, "P2": {"htmlDir": "docs/post/workers-xiang-mu.html", "labels": ["documentation"], "postTitle": "workers\u9879\u76ee", "postUrl": "post/workers-xiang-mu.html", "postSourceUrl": "https://github.com/Rainnee1997/rainnee.github.io/issues/2", "commentNum": 0, "wordCount": 3976, "description": "Google\u641c\u7d22\u4ee3\u7801\r\n`// \u53cd\u4ee3\u76ee\u6807\u7f51\u7ad9\r\nconst upstream = 'ipv6.google.com.hk'\r\nconst upstream_v4 = 'www.google.com.hk'\r\n\r\n// \u8bbf\u95ee\u533a\u57df\u9ed1\u540d\u5355\uff08\u6309\u9700\u8bbe\u7f6e\uff09.\r\nconst blocked_region = ['TK']\r\n\r\n//\u8d44\u6e90\u91cd\u5b9a\u5411\r\nconst replace_dict = {\r\n'$upstream': '$custom_domain',\r\n\r\n'www.google.com/': 'YOUR SUB DOMAIN/', //\u586b\u5165\u4f60\u7684\u5b50\u57df\u540d\r\n \r\n'gstatic.com': 'gstatic.cn',\r\n\r\n'ajax.googleapis.com': 'ajax.lug.ustc.edu.cn',\r\n'fonts.googleapis.com': 'fonts.googleapis.cn',\r\n'themes.googleusercontent.com': 'google-themes.lug.ustc.edu.cn',\r\n'www.gravatar.com/avatar':'dn-qiniu-avatar.qbox.me/avatar',\r\n\r\n'www.google.co.jp': '$custom_domain',\r\n'www.google.com.sg': '$custom_domain',\r\n'books.google.com.hk': '$custom_domain',\r\n'books.google.co.jp': '$custom_domain',\r\n'books.google.com.sg': '$custom_domain',\r\n'maps.google.com.hk': '$custom_domain',\r\n'maps.google.co.jp': '$custom_domain',\r\n'maps.google.com.sg': '$custom_domain',\r\n'maps.google.com': '$custom_domain',\r\n'books.google.com': '$custom_domain'\r\n\r\n}\r\n\r\naddEventListener('fetch', event => {\r\nevent.respondWith(fetchAndApply(event.request));\r\n})\r\n\r\nasync function fetchAndApply(request) {\r\n\r\nconst region = request.headers.get('cf-ipcountry').toUpperCase();\r\n//const ip_address = request.headers.get('cf-connecting-ip');\r\nconst user_agent = request.headers.get('user-agent');\r\n\r\nlet response = null;\r\nlet url = new URL(request.url);\r\nlet url_host = url.host;\r\n\r\nif (url.protocol == 'http:') {\r\n    url.protocol = 'https:'\r\n    response = Response.redirect(url.href);\r\n    return response;\r\n}\r\n\r\n//\u68c0\u67e5\u662f\u5426\u4e3a\u56fe\u7247\u641c\u7d22\r\nvar key=url.href;\r\nvar ikey1='tbm=isch';\r\nvar ikey2='/img';\r\nif ((key.search(ikey1)==-1)&(key.search(ikey2)==-1)){\r\n  var upstream_domain = upstream;\r\n}else{\r\n  var upstream_domain = upstream_v4;\r\n}\r\n\r\nurl.host = upstream_domain;\r\n\r\nif (blocked_region.includes(region)) {\r\n    response = new Response('Access denied: WorkersProxy is not available in your region yet.', {\r\n        status: 403\r\n    });\r\n} else{\r\n    let method = request.method;\r\n    let request_headers = request.headers;\r\n    let new_request_headers = new Headers(request_headers);\r\n\r\n    new_request_headers.set('Host', upstream_domain);\r\n    new_request_headers.set('Referer', url.href);\r\n\r\n    let original_response = await fetch(url.href, {\r\n        method: method,\r\n        headers: new_request_headers\r\n    })\r\n\r\n    let original_response_clone = original_response.clone();\r\n    let original_text = null;\r\n    let response_headers = original_response.headers;\r\n    let new_response_headers = new Headers(response_headers);\r\n    let status = original_response.status;\r\n\r\n    new_response_headers.set('cache-control' ,'public, max-age=14400')\r\n    new_response_headers.set('access-control-allow-origin', '*');\r\n    new_response_headers.set('access-control-allow-credentials', true);\r\n    new_response_headers.delete('content-security-policy');\r\n    new_response_headers.delete('content-security-policy-report-only');\r\n    new_response_headers.delete('clear-site-data');\r\n\r\n    const content_type = new_response_headers.get('content-type');\r\n    if (content_type.includes('text/html')&& content_type.includes('UTF-8')) {// && content_type.includes('UTF-8')\r\n        original_text = await replace_response_text(original_response_clone, upstream_domain, url_host);\r\n    } else {\r\n        original_text = original_response_clone.body\r\n    }\r\n\r\n    response = new Response(original_text, {\r\n        status,\r\n        headers: new_response_headers\r\n    })\r\n}\r\nreturn response;\r\n}\r\n\r\n\r\nasync function replace_response_text(response, upstream_domain, host_name) {\r\nlet text = await response.text()\r\n\r\nvar i, j;\r\nfor (i in replace_dict) {\r\n    j = replace_dict[i]\r\n    if (i == '$upstream') {\r\n        i = upstream_domain\r\n    } else if (i == '$custom_domain') {\r\n        i = host_name\r\n    }\r\n    \r\n    if (j == '$upstream') {\r\n        j = upstream_domain\r\n    } else if (j == '$custom_domain') {\r\n        j = host_name\r\n    }\r\n\r\n    let re = new RegExp(i, 'g')\r\n    text = text.replace(re, j);\r\n}\r\n\r\nreturn text;\r\n}`\u3002", "top": 0, "createdAt": 1719543573, "style": "", "script": "", "ogImage": "https://avatars.githubusercontent.com/u/53606070?v=4", "createdDate": "2024-06-28", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "documentation": "#0075ca", "duplicate": "#cfd3d7", "enhancement": "#a2eeef", "good first issue": "#7057ff", "help wanted": "#008672", "invalid": "#e4e669", "question": "#d876e3", "wontfix": "#ffffff"}, "displayTitle": "rainy\u7684\u535a\u5ba2", "faviconUrl": "https://avatars.githubusercontent.com/u/53606070?v=4", "ogImage": "https://avatars.githubusercontent.com/u/53606070?v=4", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://Rainnee1997.github.io/rainnee.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}