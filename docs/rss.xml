<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>rainy的博客</title><link>https://Rainnee1997.github.io/rainnee.github.io</link><description>rainy的学习记录分享</description><copyright>rainy的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/53606070?v=4</url><title>avatar</title><link>https://Rainnee1997.github.io/rainnee.github.io</link></image><lastBuildDate>Fri, 28 Jun 2024 09:34:05 +0000</lastBuildDate><managingEditor>rainy的博客</managingEditor><ttl>60</ttl><webMaster>rainy的博客</webMaster><item><title>workers项目</title><link>https://Rainnee1997.github.io/rainnee.github.io/post/workers-xiang-mu.html</link><description>Google搜索代码&#13;
`// 反代目标网站&#13;
const upstream = 'ipv6.google.com.hk'&#13;
const upstream_v4 = 'www.google.com.hk'&#13;
&#13;
// 访问区域黑名单（按需设置）.&#13;
const blocked_region = ['TK']&#13;
&#13;
//资源重定向&#13;
const replace_dict = {&#13;
'$upstream': '$custom_domain',&#13;
&#13;
'www.google.com/': 'YOUR SUB DOMAIN/', //填入你的子域名&#13;
 &#13;
'gstatic.com': 'gstatic.cn',&#13;
&#13;
'ajax.googleapis.com': 'ajax.lug.ustc.edu.cn',&#13;
'fonts.googleapis.com': 'fonts.googleapis.cn',&#13;
'themes.googleusercontent.com': 'google-themes.lug.ustc.edu.cn',&#13;
'www.gravatar.com/avatar':'dn-qiniu-avatar.qbox.me/avatar',&#13;
&#13;
'www.google.co.jp': '$custom_domain',&#13;
'www.google.com.sg': '$custom_domain',&#13;
'books.google.com.hk': '$custom_domain',&#13;
'books.google.co.jp': '$custom_domain',&#13;
'books.google.com.sg': '$custom_domain',&#13;
'maps.google.com.hk': '$custom_domain',&#13;
'maps.google.co.jp': '$custom_domain',&#13;
'maps.google.com.sg': '$custom_domain',&#13;
'maps.google.com': '$custom_domain',&#13;
'books.google.com': '$custom_domain'&#13;
&#13;
}&#13;
&#13;
addEventListener('fetch', event =&gt; {&#13;
event.respondWith(fetchAndApply(event.request));&#13;
})&#13;
&#13;
async function fetchAndApply(request) {&#13;
&#13;
const region = request.headers.get('cf-ipcountry').toUpperCase();&#13;
//const ip_address = request.headers.get('cf-connecting-ip');&#13;
const user_agent = request.headers.get('user-agent');&#13;
&#13;
let response = null;&#13;
let url = new URL(request.url);&#13;
let url_host = url.host;&#13;
&#13;
if (url.protocol == 'http:') {&#13;
    url.protocol = 'https:'&#13;
    response = Response.redirect(url.href);&#13;
    return response;&#13;
}&#13;
&#13;
//检查是否为图片搜索&#13;
var key=url.href;&#13;
var ikey1='tbm=isch';&#13;
var ikey2='/img';&#13;
if ((key.search(ikey1)==-1)&amp;(key.search(ikey2)==-1)){&#13;
  var upstream_domain = upstream;&#13;
}else{&#13;
  var upstream_domain = upstream_v4;&#13;
}&#13;
&#13;
url.host = upstream_domain;&#13;
&#13;
if (blocked_region.includes(region)) {&#13;
    response = new Response('Access denied: WorkersProxy is not available in your region yet.', {&#13;
        status: 403&#13;
    });&#13;
} else{&#13;
    let method = request.method;&#13;
    let request_headers = request.headers;&#13;
    let new_request_headers = new Headers(request_headers);&#13;
&#13;
    new_request_headers.set('Host', upstream_domain);&#13;
    new_request_headers.set('Referer', url.href);&#13;
&#13;
    let original_response = await fetch(url.href, {&#13;
        method: method,&#13;
        headers: new_request_headers&#13;
    })&#13;
&#13;
    let original_response_clone = original_response.clone();&#13;
    let original_text = null;&#13;
    let response_headers = original_response.headers;&#13;
    let new_response_headers = new Headers(response_headers);&#13;
    let status = original_response.status;&#13;
&#13;
    new_response_headers.set('cache-control' ,'public, max-age=14400')&#13;
    new_response_headers.set('access-control-allow-origin', '*');&#13;
    new_response_headers.set('access-control-allow-credentials', true);&#13;
    new_response_headers.delete('content-security-policy');&#13;
    new_response_headers.delete('content-security-policy-report-only');&#13;
    new_response_headers.delete('clear-site-data');&#13;
&#13;
    const content_type = new_response_headers.get('content-type');&#13;
    if (content_type.includes('text/html')&amp;&amp; content_type.includes('UTF-8')) {// &amp;&amp; content_type.includes('UTF-8')&#13;
        original_text = await replace_response_text(original_response_clone, upstream_domain, url_host);&#13;
    } else {&#13;
        original_text = original_response_clone.body&#13;
    }&#13;
&#13;
    response = new Response(original_text, {&#13;
        status,&#13;
        headers: new_response_headers&#13;
    })&#13;
}&#13;
return response;&#13;
}&#13;
&#13;
&#13;
async function replace_response_text(response, upstream_domain, host_name) {&#13;
let text = await response.text()&#13;
&#13;
var i, j;&#13;
for (i in replace_dict) {&#13;
    j = replace_dict[i]&#13;
    if (i == '$upstream') {&#13;
        i = upstream_domain&#13;
    } else if (i == '$custom_domain') {&#13;
        i = host_name&#13;
    }&#13;
    &#13;
    if (j == '$upstream') {&#13;
        j = upstream_domain&#13;
    } else if (j == '$custom_domain') {&#13;
        j = host_name&#13;
    }&#13;
&#13;
    let re = new RegExp(i, 'g')&#13;
    text = text.replace(re, j);&#13;
}&#13;
&#13;
return text;&#13;
}`。</description><guid isPermaLink="true">https://Rainnee1997.github.io/rainnee.github.io/post/workers-xiang-mu.html</guid><pubDate>Fri, 28 Jun 2024 02:59:33 +0000</pubDate></item><item><title>rainy的学习记录</title><link>https://Rainnee1997.github.io/rainnee.github.io/post/rainy-de-xue-xi-ji-lu.html</link><description>记录属于自己的学习。</description><guid isPermaLink="true">https://Rainnee1997.github.io/rainnee.github.io/post/rainy-de-xue-xi-ji-lu.html</guid><pubDate>Fri, 28 Jun 2024 01:28:33 +0000</pubDate></item></channel></rss>